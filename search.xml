<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/03/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是我的第一篇博客，欢迎大家~</p>
<p>balabalabala…</p>
<p>goodbye~</p>
]]></content>
  </entry>
  <entry>
    <title>【剑指Offer】面试题52——两个链表的第一个公共节点</title>
    <url>/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="【剑指Offer】面试题52——两个链表的第一个公共节点"><a href="#【剑指Offer】面试题52——两个链表的第一个公共节点" class="headerlink" title="【剑指Offer】面试题52——两个链表的第一个公共节点"></a>【剑指Offer】面试题52——两个链表的第一个公共节点</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><img src="/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/image-20200420184432589.png" class>

<h2 id="2-解法"><a href="#2-解法" class="headerlink" title="2.解法"></a>2.解法</h2><ol>
<li><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p><strong>解题思路</strong>：类似于两个数组的嵌套循环，找到公共的节点。</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode curA = headA, curB = headB;</span><br><span class="line">        <span class="comment">//两层循环</span></span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curB != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//找到相同节点，并返回该节点</span></span><br><span class="line">                <span class="keyword">if</span>(curA == curB)&#123;</span><br><span class="line">                    <span class="keyword">return</span> curB;</span><br><span class="line">                &#125;</span><br><span class="line">                curB = curB.next;</span><br><span class="line">            &#125;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            <span class="comment">//注意这里需要将curB复位到headB</span></span><br><span class="line">            curB = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行结果</strong>：<img src="/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/image-20200420222202687.png" class></p>
<p><strong>时间复杂度</strong>：<em>O(n*m)</em></p>
<p><strong>空间复杂度</strong>：<em>O(1)</em></p>
<hr>
</li>
<li><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p><strong>解题思路</strong>：创建哈希表，将headA放入哈希表中，在哈希表中查找与headB公共的headA节点。</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap,key为ListNode类，value为Boolean型</span></span><br><span class="line">        HashMap&lt;ListNode, Boolean&gt; map = <span class="keyword">new</span> HashMap&lt;ListNode, Boolean&gt;();</span><br><span class="line">        ListNode curA = headA;</span><br><span class="line">        ListNode curB = headB;</span><br><span class="line">        <span class="comment">//遍历链表A并存储</span></span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(curA, <span class="keyword">true</span>);</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在哈希表中查找公共节点</span></span><br><span class="line">        <span class="keyword">while</span>(curB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(curB))&#123;</span><br><span class="line">                <span class="keyword">return</span> curB;</span><br><span class="line">            &#125;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行结果</strong>：<img src="/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/image-20200420222811799.png" class></p>
<p><strong>时间复杂度</strong>：<em>O(n)</em></p>
<p><strong>空间复杂度</strong>：<em>O(n)</em></p>
<hr>
</li>
<li><h4 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h4><p><strong>解题思路</strong>：计算两链表节点个数之差<em>n</em>，将长链表指针右移<em>n</em>步，然后两链表同时向后查找公共节点。</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        ListNode curA = headA, curB = headB;</span><br><span class="line">        <span class="comment">//计数器计量链表A长度</span></span><br><span class="line">        <span class="keyword">while</span>(curA.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计数器累减计算A、B两表长度差</span></span><br><span class="line">        <span class="keyword">while</span>(curB.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果A、B链表尾结点不相等，说明不存在公共节点</span></span><br><span class="line">        <span class="keyword">if</span>(curA != curB) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        curA = n &gt; <span class="number">0</span> ? headA : headB;</span><br><span class="line">        curB = curA == headA ? headB : headA;</span><br><span class="line">        <span class="comment">//计数器可能为负值，需要取绝对值！</span></span><br><span class="line">        n = Math.abs(n);</span><br><span class="line">        <span class="comment">//长链表指针右移n步</span></span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两表同时遍历</span></span><br><span class="line">        <span class="keyword">while</span>(curA != curB)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行结果</strong>：<img src="/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/image-20200420225705609.png" class></p>
<p><strong>时间复杂度</strong>：<em>O(n+m)</em></p>
<p><strong>空间复杂度</strong>：<em>O(1)</em></p>
<hr>
</li>
<li><h4 id="双指针（最浪漫的相遇）"><a href="#双指针（最浪漫的相遇）" class="headerlink" title="双指针（最浪漫的相遇）"></a>双指针（最浪漫的相遇）</h4><p><strong>解题思路</strong>：链表A的指针遍历完链表A后，接着遍历链表B；链表B的指针遍历完链表B后，接着遍历链表A；若存在公共节点，则两个指针相遇的时候，即为公共节点所在。</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode h1 = headA, h2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(h1 != h2)&#123;</span><br><span class="line">            h1 = h1 == <span class="keyword">null</span> ? headB : h1.next;</span><br><span class="line">            h2 = h2 == <span class="keyword">null</span> ? headA : h2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行结果</strong>：<img src="/2020/04/20/%E3%80%90%E5%89%91%E6%8C%87Offer%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%9852%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/image-20200420230353612.png" class></p>
<p><strong>时间复杂度</strong>：<em>O(n+m)</em></p>
<p><strong>空间复杂度</strong>：<em>O(1)</em></p>
</li>
</ol>
]]></content>
      <categories>
        <category>剑指Offer</category>
      </categories>
  </entry>
</search>
